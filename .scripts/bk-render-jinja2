#!/usr/bin/env python
# preprocessor to render markdown using the jinja2 template engine
# author: Fabian Hirschmann

import json
import sys
import os
import re
import nbformat
import base64
from functools import partial
from nbconvert import HTMLExporter, MarkdownExporter

import jinja2

# When this runs through GitHub actions, we use $GITHUB_REPOSITORY, otherwise $BK_REPO.
BK_REPO=os.environ.get("GITHUB_REPOSITORY")
if not BK_REPO:
    BK_REPO=os.environ.get("BK_REPO")

    
def render_author(name, url):
    return f'Author: <a href="{url}">{name}</a>'


def render_tutorial(content):
    environment = jinja2.Environment(loader=jinja2.FileSystemLoader(searchpath="content"))
    template = environment.from_string(content)

    rendered = template.render(
        ON_ARGOLIS=(os.getenv("GCP_USERNAME") or "").endswith("altostrat.com"),
        PROJECT_ID=os.getenv("PROJECT_ID"),
        PROJECT_NUMBER=os.getenv("PROJECT_NUMBER"),
        REGION=os.getenv("REGION"),
        MY_NAME=os.getenv("MY_NAME"),
        GCP_USERNAME=os.getenv("GCP_USERNAME"),
        author=partial(render_author),
    )

    rendered = re.sub(
        r'!\[(.*?)\]\(../img/(.*?)\)',
        rf'![\1](https://github.com/{BK_REPO}/blob/main/docs/img/\2?raw=true)',
        rendered
    )
    rendered = re.sub(
        r'<img\s+src\s*=\s*["\']\.\./img/(.*?)["\']',
        rf'<img src="https://github.com/{BK_REPO}/blob/main/docs/img/\1?raw=true"',
        rendered
    )

    return rendered 


if __name__ == '__main__':
    with open(sys.argv[1]) as in_md:
        with open(sys.argv[2], "w") as out_md:
            rendered = render_tutorial(in_md.read())
            out_md.write(rendered)
