#!/bin/bash
# author: Fabian Hirschmann

pip install -r requirements.txt

[[ "$BK_INITIALIZED" != "1" ]] && echo "Bootkon has not been initialized. Please follow the tutorial and run '. bk'" && exit 1

declare -a user_roles=(
    "roles/bigquery.jobUser" # Can run BigQuery jobs
    "roles/bigquery.dataEditor" # Can edit BigQuery datasets
    "roles/bigquery.connectionAdmin" # Can manage BigQuery connections
    "roles/dataproc.editor" # Can edit Dataproc clusters
    "roles/aiplatform.admin" # Admin on Vertex AI
    "roles/dataplex.admin" # Admin on Dataplex
    "roles/datalineage.admin" # Admin on data lineage operations
    "roles/compute.admin" # Admin on Compute Engine
    "roles/storage.admin" # Admin on Cloud Storage
    "roles/storage.objectViewer" # Can view Cloud Storage objects
    "roles/storage.objectAdmin" # Admin on Cloud Storage objects
    "roles/iam.serviceAccountUser" # Can use service accounts
    "roles/pubsub.admin" # Admin on Pub/Sub
    "roles/artifactregistry.admin" # Artifact Registry admin
    "roles/resourcemanager.projectIamAdmin" # Project IAM admin
    "roles/aiplatform.admin" # Vertex AI admin
    "roles/cloudbuild.builds.editor" # Cloud Build editor
)

# Assign roles to user
for role in "${user_roles[@]}"; do
    echo "Assigning role $role to $USER_EMAIL in project $PROJECT_ID..."
    gcloud projects add-iam-policy-binding "$PROJECT_ID" \
        --member="user:$GCP_USERNAME" --role="$role" >>/dev/null
done

# Define service account email using the project number
COMPUTE_SERVICE_ACCOUNT="$PROJECT_NUMBER-compute@developer.gserviceaccount.com"

# Array of service account roles with descriptions
declare -a service_account_roles=(
    "roles/dataproc.worker" # Can perform actions as a Dataproc worker
    "roles/bigquery.dataEditor" # Can edit BigQuery datasets
    "roles/bigquery.jobUser" # Can run BigQuery jobs
    "roles/storage.objectAdmin" # Admin on Cloud Storage objects
    "roles/storage.admin" # Admin on Cloud Storage
    "roles/storage.objectViewer" # Can view Cloud Storage objects
    "roles/iam.serviceAccountUser" # Can use service accounts
    "roles/pubsub.admin" # Admin on Pub/Sub
    "roles/serviceusage.serviceUsageConsumer" # Can use services
    "roles/artifactregistry.admin" # Artifact registry admin
    "roles/resourcemanager.projectIamAdmin" # Project IAM admin
    "roles/aiplatform.admin" # Vertex AI admin
    "roles/cloudbuild.builds.editor" # Cloud Build editor
)

# Assign roles to the compute service account
for role in "${service_account_roles[@]}"; do
    echo "Assigning role $role to $COMPUTE_SERVICE_ACCOUNT in project $PROJECT_ID..."
    gcloud projects add-iam-policy-binding "$PROJECT_ID" \
        --member="serviceAccount:$COMPUTE_SERVICE_ACCOUNT" --role="$role" >>/dev/null
done

VERTEX_AI_CC_SERVICE_ACCOUNT="service-$PROJECT_NUMBER@gcp-sa-aiplatform-cc.iam.gserviceaccount.com"

# Array of roles to grant to the Vertex AI Custom Code Service Agent
declare -a vertex_cc_service_agent_roles=(
    "roles/artifactregistry.reader"          # AI Platform Artifact Registry Reader
    "roles/artifactregistry.serviceAgent"    # Custom Artifact Registry Service Agent
    "roles/aiplatform.customCodeServiceAgent" # Vertex AI Custom Code Service Agent
)

# Assign roles to the Vertex AI Custom Code Service Account
for role in "${vertex_cc_service_agent_roles[@]}"; do
    echo "Assigning role $role to $VERTEX_AI_CC_SERVICE_ACCOUNT in project $PROJECT_ID..."
    gcloud projects add-iam-policy-binding "$PROJECT_ID" \
        --member="serviceAccount:$VERTEX_AI_CC_SERVICE_ACCOUNT" --role="$role" >>/dev/null
done